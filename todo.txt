- gotta release something
Well, I guess I could put the local storage stuff back in.  Just need to make a new format for it.

It's currently a little unusable.  What does it need?
    finish the 'make subroutine from' call -- done
    bust apart subroutines
    some kind of context menu for selecting this stuff...
    delete nodes
    delete connections
    rearrange nib ordering with drag and drop
    edit individual nodes, and give the 'clone' option
        edit values

Nice to haves:
    "idempotent" checkbox that memoizes?
    "stateful" checkbox that adds extra null nibs
    "glob nibs" - one nib internally that is many nibs externally, var args


- networking / publishing / collaboration
This is a serious component.  What should I do for it?  Hm.
Currently it is in a 100% local form.  Will you always be able to download the whole library?  Probably not, but perhaps I can solve that problem when I come to it.

Will need a system to fetch newly published functions.  Should they show up in a different area from the normal functions?




- editing this node vs all uses
copy-on-write?
There should be a way to edit "just this node" (which clones the implementation) or dit the original implementation.  Perhaps there would also be a middle ground where you would only be editing ones that are referenced by the current pinned functions.  You could pin functions to indicate you're working on them, so the UI would know that the functions you edit should track those.

Perhaps for now it would be easiest to go to the main implementation first, but include a "clone" button on the page if you came in from a particular node.  This would be the node edit view.


- serious problem -- averted
Creating new inputs/outputs on a subroutine does not update that subroutines uses.  It needs to.  It would be nice if this information were linked somehow, but unfortunately an input object on one side is an output on the other.  But somehow all the implementations need to know if things are changing!  Ugh.  hm.

It's really important to keep track of what nibs things are connected to with more than just their name or index.  Nibs need IDs.  Nibs should actually belong to functions, and just be referenced by applications.  That way they do double duty.  Gotta treat them differently whether you're connecting to a subroutine or not that way though.

Connections should connect to nib objects, and they should be remembered by ID.  This way you can easily rearrange nibs by index without breaking connections anywhere in the program.  Also, there should be a big warning any time you delete a nib, since this can't be undone...unless we have some 'resurrect a deleted nib' feature, where subroutines remember nibs they used to own.  Yeah, that's probably best.  Creating a new nib will never substitute for an old one though.

- connection refactor
    - editing - done
    - execution - done
    - inputs for builtins - done
    - rename things - done
    - saving - done
    - loading new and legacy stuff - done

- other important stuff
    - placeholder names - done
    - proper events for inputs - done
    - contextual warning when deleting nibs from definitions - done


- networking



- reduce uses of literal by uniquifying them on creation?  But what if you want to edit them?  How do you edit literals?



- needed features
    - create a subroutine from selected nodes
    - use shift button to add to / remove from selection
    - allow creation of codes in coffeescript
    - variable inputs and splatting
    - idempotency
    - radial menus when you click



- visual style
    - style the code page
        - add ace editor
    - lock library header to top?
    - buttons instead of links on top

- make a game with it
    - setInterval primitive
    - window primitive

- make a debugger
    - highlight the lines, step through


- re-implement UI
    + add/remove inputs
    - rearrange inputs

- scale everything based on the size of the screen.  Gotta make everything accessible no matter what your screen size is.

-





------- old priorities ----------



- add a place to put documentation on implementations
- don't allow connections from inputs to inputs or outputs to outputs
- add a smart delete feature for subroutines
    - list the number of subroutines that use this one.  Click this to see their names
    - if this subroutine is used by another, ask if we should delete that one as well
    - if there are other subroutines that are only used by this subroutine, ask if we should delete those as well

- add history support
    - just use the id of the object you're editing

- use Ace editor for the javascript editors

- Create dynamic function call node.  Speficy the inputs and outputs on it dynamically
    Perhaps show it with no normal inputs/outputs at first, but have a special '+' input and output on the right.  When you connect things to this,
    they become new inputs/outputs.  Would need a way to delete them too.  Perhaps as an option in a real right-click menu.

- I should re-do the vis in canvas for more readability.  Should I rotate it to look like all the other visual languages out there?

- make a server-side service that will request arbitrary urls for you

- make a jquery selector builtin

- edit the number of inputs/outputs on existing subroutines
    - needs lots of feedback for when you delete a nib that is in use in some program somewhere
    - ugh, I'd rather this system didn't act so inflexible.  Perhaps I should make an 'unknown-nib' show up and bundle all the higher-index connections into there.
        - this could help for unknown implementation nodes too!  Yeah.
        - it could throw the NotConnected exception if you tried to evaluate off of it.

- make a slider to increase the detail level (make everything smaller), and another to zoom in/out and pan like http://worrydream.com/#!/GesturalZoomAndPan

- add an "Idempotent" checkbox to javascript functions.  If a all trees leading into an idempotent function are idempotetnt, its result can safely be memoized to improve performance of algorithms like fibonacci.
    - add a checkbox to turn off this memoizing on a given subroutine if it takes too much memory
    - only memoize at the furthest point that it is safe to.  Don't bother memoizing intermediate values.
        - how to handle multiple inputs/outputs?  Well, we can only really memoize on a per-connection basis I guess.


- think about how version control could work
    - save every version of a function
    - allow users to upgrade theirs and notice when input compatibility is broken.

- online persistence
    - should still allow you to play around in localstorage if you are not registered, but you must register in order to upload your work.
    - allow you to search through all the users and see their things
        - mark things private?  But you can't do that if you used them in public programs.  Notify that all referencing functions must be private too.

- don't let literal values contain non-json values.  Currently they can if you type stuff in.

- perhaps I should have a save-on-run system?

- add some higher order functions
    - map, reduce
- remember what program you were looking at in localstorage
- add a 'fork' button for subroutines that makes a copy with a different id
- add memoize builtin to fibonacci example.  use underscore
- implement builtins for dealing with lists and maps


- instructions on page
    - right-click nodes to delete them, right-click nibs to delete connections
    - warn about clobbering with imports (based on id)

- fix the font somehow
- replace alerts with a console?
- Add box/multi-select
    - convert selection to subroutine, counting inputs and outputs

